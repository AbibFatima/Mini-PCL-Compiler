s: 	IDF '{' VAR '{' DECLARATION '}' CODE '{' Instructionsions '}' '}' ;

DECLARATION : DECLARATION_Variables ';' DECLARATION {printf ("reduction vardeclar\n"); } 
			| DECLARATION_Struct ';' DECLARATION {printf ("reduction struct declar\n"); }
			| DECLARATION_Struct_Var ';' DECLARATION {printf ("reduction struct elem declar\n"); }
			| DECLARATION_Tableau ';' DECLARATION
			| DECLARATION_Const ';' DECLARATION {printf ("reduction const declar\n"); }
			| COMMENT DECLARATION {printf ("reduction comment declar\n"); }
			|;

DECLARATION_Variables : TYPE liste_idf ;

DECLARATION_Struct : STRUCT '{' DECLARATION_Variables '}' IDF ;

DECLARATION_Struct_Var : STRUCT IDF liste_idf  ;

DECLARATION_Const :  CONST IDF AFF literal ;

TYPE : 	INTEGER {printf ("reduction mot cle INTEGER dans TYPE\n");}
		| FLOAT {printf ("reduction mot cle FLOAT dans TYPE\n");}
		;

liste_idf:	IDF ',' liste_idf {printf ("reduction : IDF,liste_idf dans liste_idf\n");}
        	| IDF {printf ("reduction : IDF dans liste_idf  \n");}
        	;

DECLARATION_Tableau : IDF '[' ENTIER ']' STRUCT {printf ("reduction DECLARATION_Tableau\n");}
			;

literal : 	ENTIER | REEL ;

Instructionsions : 	Inst Instructionsions
				| ;

Inst:   Inst_AFF ';' {printf ("reduction affectation\n"); } 
		| Inst_IF  {printf ("reduction Condition if\n"); } 
		| Inst_WHILE  {printf ("reduction boucle while\n"); } 
		| Inst_FOR {printf ("reduction boucle for\n"); } 
		| COMMENT inst {printf ("reduction comment dans inst\n"); } 
	    ;

Inst_AFF : IDF AFF expression ;

Inst_IF:	IF '(' Expression_Condition ')' '{' Instructions '}' ELSE '{' Instructions '}' {printf ("reduction IF ELSE\n");} 
		|  IF '(' Expression_Condition ')' '{' Instructions '}' {printf ("reduction IF\n");}
        ;

Inst_WHILE:  WHILE '(' Expression_Condition ')' '{' Instructions '}'
			;

Inst_FOR : 	FOR '(' IDF ':' literal ':' literal ':' IDF ')' '{' Instructions '}' 
			;

Expression_Condition :  Condition  AND Expression_Condition
				| Condition  OR Expression_Condition
				| Condition
				;

Condition:	expression OP_expression expression 
			| NOT expression
            ;

OP_expression : GREATER {printf ("reduction sup\n");}
				| LESS {printf ("reduction inf\n");}
				| EQUAL {printf ("reduction egale\n");}
				| GREATEREQUAL {printf ("reduction sup egale\n");}
				| LESSEQUAL {printf ("reduction inf egale\n");}
				| NOTEQUAL {printf ("reduction pas egale\n");}
				;

expression: expression ADD expression {printf ("reduction addition\n");}
	| expression SUB expression {printf ("reduction soustraction\n");}	
	| expression DIV expression {printf ("reduction div\n");}
	| expression MUL expression {printf ("reduction mul\n");}
	| IDF {printf ("reduction terminal idf dans exp\n"); }
	| ENTIER {printf ("reduction terminal entier dans exp\n");}
	| REEL {printf ("reduction terminal reel dans exp\n");}
	|'(' expression ')' {printf ("reduction exp parentheses dans exp\n");}
	;






============================================
s: 	IDF '{' VAR '{' DECLARATION '}' CODE '{'  '}' '}' ;

DECLARATION : DECLARATION_Variables ';' DECLARATION {printf ("reduction vardeclar\n"); } 
			| DECLARATION_Struct ';' DECLARATION {printf ("reduction struct declar\n"); }
			| DECLARATION_Struct_Var ';' DECLARATION {printf ("reduction struct elem declar\n"); }
			| DECLARATION_Tableau ';' DECLARATION
			| DECLARATION_Const ';' DECLARATION {printf ("reduction const declar\n"); }
			| COMMENT DECLARATION {printf ("reduction comment declar\n"); }
			|;

DECLARATION_Variables : INTEGER liste_idf
						| FLOAT liste_idf ;

liste_idf:	IDF ',' liste_idf 
        	| IDF 
        	;

DECLARATION_Struct : 	STRUCT '{' DECLARATION_Variables '}' IDF 
						;

DECLARATION_Struct_Var : 	STRUCT IDF liste_idf  
							;

DECLARATION_Const : CONST IDF AFF literal 
					;

DECLARATION_Tableau : 	IDF '[' ENTIER ']'  
						;

literal : 	ENTIER 
			| REEL 
			;