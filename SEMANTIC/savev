%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "TS.h"
#include "RS.h"
 
int indice_tab_expr = 0; 

int yylex();
int yyerror(char *);

extern FILE* yyin;
extern int ligne, col;

int type;
int nature;
char* Op;
%}
%union {
	char* nom;
	int* entier;
  	double* reel;
}
%token<entier>
%token<reel>
%token<nom> IDF AFF ENTIER REEL CODE VAR CONST STRUCT ':' ';' INTEGER FLOAT '(' ')' ','  '{' '}' '[' ']' AND OR NOT GREATER LESS GREATEREQUAL LESSEQUAL EQUAL NOTEQUAL IF ELSE WHILE FOR COMMENT
%left ADD SUB
%left MUL DIV

%%	
s: 	IDF '{' VAR '{' DECLARATION '}' CODE '{' Instructions '}' '}' { printf ("programme syntaxiquement juste \n");YYACCEPT ;}
	;

DECLARATION : DECLARATION_Variables ';' DECLARATION 
			| DECLARATION_Struct ';' DECLARATION 
			| DECLARATION_Struct_Var ';' DECLARATION 
			| DECLARATION_Tableau ';' DECLARATION
			| DECLARATION_Const ';' DECLARATION 
			| COMMENT DECLARATION 
			|;

DECLARATION_Variables : TYPE liste_idf  
						;

liste_idf:	IDF ',' liste_idf { doubleDec ($1); inserer($1,type,nature);}
        	| IDF  {doubleDec ($1); inserer($1,type,nature);}
        	;			

DECLARATION_Struct : STRUCT '{' declarStructFields '}' IDF { doubleDec ($5); type=0; nature=2; inserer($5,type,nature);} ;

DECLARATION_Struct_Var : STRUCT IDF {type=0; nature=2;} liste_idf ;

DECLARATION_Const : CONST IDF AFF literal {doubleDec ($2); nature=1; inserer($2,type,nature);}
					;

DECLARATION_Tableau : 	TYPE IDF '[' literal ']' {doubleDec ($2); nature=3; inserer ($2,type,nature);}
						;

declarStructFields : 	TYPE IDF ',' declarStructFields {doubleDec ($2); nature=0; inserer($2,type,nature);}
						|;

TYPE : 	INTEGER {type=1;}
		| FLOAT {type=2;}
		;

literal : 	ENTIER {type=1;}
			| REEL {type=2;}
			;

Instructions : 	Inst Instructions
				|;

Inst:   Inst_AFF ';' 
		| Inst_IF  
		| Inst_WHILE  
		| Inst_FOR
		| COMMENT 
	    ;
		

Inst_AFF : 	IDF AFF expression {printf("\n I STOPED HERE \n"); dec ($1); incompType($1,$3); divZero(indice_tab_expr); indice_tab_expr=0;  }
			;

Inst_IF:	IF '(' Expression_Condition ')' '{' Instructions '}' ELSE '{' Instructions '}' 
			|  IF '(' Expression_Condition ')' '{' Instructions '}' 
        	;

Inst_WHILE: WHILE '(' Expression_Condition ')' '{' Instructions '}'
			;

Inst_FOR : 	FOR '(' Expression_FOR ')'  '{' Instructions '}' 
			;

Expression_FOR 	: Init_FOR ':' Pas_FOR ':' Cond_arret 
				; 
Init_FOR : 	IDF ':' literal {dec ($1);} 
			;
Pas_FOR : literal 
		;
Cond_arret : 	IDF {dec ($1);}
				| literal 
				;

Expression_Condition :  Condition  AND Expression_Condition
						| Condition  OR Expression_Condition
						| Condition
						;

Condition:	expression OP_expression expression | NOT expression
            ;

OP_expression : GREATER | LESS | EQUAL | GREATEREQUAL| LESSEQUAL | NOTEQUAL 
				;
	
expression: expression ADD expression {
										Op="+"; 
										strcpy(tab_expression[indice_tab_expr],Op); 
										indice_tab_expr++; 
									}
	| expression SUB expression {Op="-"; strcpy(tab_expression[indice_tab_expr],Op); indice_tab_expr++; }	
	| expression DIV expression {Op="/"; strcpy(tab_expression[indice_tab_expr],Op); indice_tab_expr++; }
	| expression MUL expression {Op="*"; strcpy(tab_expression[indice_tab_expr],Op); indice_tab_expr++; }
	| IDF { 
			dec($1); 
			printf("IDF: %s\n", $1);
			strcpy(tab_expression[indice_tab_expr],$1); 
			printf("\n I STOPED HERE \n"); indice_tab_expr++;
		}
	| ENTIER { strcpy(tab_expression[indice_tab_expr],$1); indice_tab_expr++; }
	| REEL { strcpy(tab_expression[indice_tab_expr],$1); indice_tab_expr++; }
	|'(' expression ')' { strcpy(tab_expression[indice_tab_expr],"("); indice_tab_expr++; yyparse(); strcpy(tab_expression[indice_tab_expr],")"); indice_tab_expr++; }
	;
%%
int yyerror (char* msg){
    printf ("%s : ligne %d, colonne %d \n",msg,ligne,col); exit (0);return 1;
}

int main (){ 
    yyin = fopen("test.txt", "r");
    yyparse();
	//afficherTS();
	for (int i =0;i<indice_tab_expr;i++){
		printf(" %d \t| ",tab_expression[i]);
	}
    fclose (yyin);
}














int j=0;
                    strcpy(val,yytext);
                    if( val[0] == '-'){
                        for (int i=1;i<strlen(val);i++) {t[j]= val[i]; j++;}
                        strcpy(val,t);
                        yylval.ent = -1*atoi(val);
                    } else { if( val[0] == '+'){
                                for (int i=1;i<strlen(val);i++) {t[j]= val[i]; j++;}
                                strcpy(val,t);
                                yylval.ent = atoi(val);
                            } else {yylval.ent = atoi(yytext);}
                    }